#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∏—Ö –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –æ–¥–Ω—É –±–æ–ª—å—à—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É.
–ó–∞–≥—Ä—É–∂–∞–µ—Ç 9 —Ç–∞–π–ª–æ–≤ (3x3 —Å–µ—Ç–∫–∞) —Ä–∞–∑–º–µ—Ä–æ–º 1000x1000 –ø–∏–∫—Å–µ–ª–µ–π –∫–∞–∂–¥—ã–π.
"""

import os
import time
from io import BytesIO
import requests
from PIL import Image
from datetime import datetime
import concurrent.futures
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# URL-–∞–¥—Ä–µ—Å–∞ —Ç–∞–π–ª–æ–≤ –≤ –≤–∏–¥–µ —Å–µ—Ç–∫–∏ 3x3
TILE_URLS = [
    ["https://backend.wplace.live/files/s0/tiles/1641/946.png", 
     "https://backend.wplace.live/files/s0/tiles/1642/946.png", 
     "https://backend.wplace.live/files/s0/tiles/1643/946.png"],
    ["https://backend.wplace.live/files/s0/tiles/1641/947.png", 
     "https://backend.wplace.live/files/s0/tiles/1642/947.png", 
     "https://backend.wplace.live/files/s0/tiles/1643/947.png"],
    ["https://backend.wplace.live/files/s0/tiles/1641/948.png", 
     "https://backend.wplace.live/files/s0/tiles/1642/948.png", 
     "https://backend.wplace.live/files/s0/tiles/1643/948.png"]
]

# –†–∞–∑–º–µ—Ä—ã
TILE_SIZE = 1000  # –†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–ª–∞ (1000x1000)
GRID_SIZE = 3     # –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ (3x3)
ORIGINAL_SIZE = TILE_SIZE * GRID_SIZE  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (3000x3000)
FINAL_SIZE = 9000  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª–µ–π
SCALE_FACTOR = FINAL_SIZE // ORIGINAL_SIZE  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (3x)

def download_image(url, timeout=30, retries=5, backoff_seconds=1.5):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL.
    
    Args:
        url (str): URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        timeout (int): –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        retries (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
        backoff_seconds (float): –ë–∞–∑–æ–≤–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
    Returns:
        PIL.Image: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    last_error = None
    for attempt in range(1, retries + 1):
        try:
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}): {url}")
            response = requests.get(url, timeout=timeout, stream=True)
            response.raise_for_status()
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ BytesIO, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            content = response.content
            image = Image.open(BytesIO(content))
            image.load()
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {url}")
            return image
        except requests.exceptions.RequestException as e:
            last_error = e
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}): {e}")
        except Exception as e:
            last_error = e
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}): {e}")
        # –ë—ç–∫–æ—Ñ—Ñ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏, –µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è
        if attempt < retries:
            sleep_seconds = backoff_seconds * attempt
            time.sleep(sleep_seconds)
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {url} –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫: {last_error}")
    return None

def create_merged_image():
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–π–ª–æ–≤.
    –î–∞–º–ø —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ 100% —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö —Ç–∞–π–ª–æ–≤.
    
    Returns:
        PIL.Image: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º 3000x3000 —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
    merged_image = Image.new('RGBA', (ORIGINAL_SIZE, ORIGINAL_SIZE), color=(0, 0, 0, 0))
    
    failed_tiles = []
    successful_tiles = 0
    total_tiles = GRID_SIZE * GRID_SIZE
    
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É {total_tiles} —Ç–∞–π–ª–æ–≤ (—Å–µ—Ç–∫–∞ {GRID_SIZE}x{GRID_SIZE})")
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=total_tiles) as executor:
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (URL, —Å—Ç—Ä–æ–∫–∞, —Å—Ç–æ–ª–±–µ—Ü)
        future_to_tile_info = {
            executor.submit(download_image, TILE_URLS[row][col]): {
                "row": row, "col": col, "url": TILE_URLS[row][col]
            }
            for row in range(GRID_SIZE) for col in range(GRID_SIZE)
        }

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        for future in concurrent.futures.as_completed(future_to_tile_info):
            info = future_to_tile_info[future]
            row, col, url = info["row"], info["col"], info["url"]

            try:
                tile = future.result()
                if tile is not None:
                    if tile.size != (TILE_SIZE, TILE_SIZE):
                        logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞ {url}: {tile.size}. –ò–∑–º–µ–Ω—è—é —Ä–∞–∑–º–µ—Ä –¥–æ {TILE_SIZE}x{TILE_SIZE}")
                        tile = tile.resize((TILE_SIZE, TILE_SIZE), Image.Resampling.LANCZOS)

                    if tile.mode != 'RGBA':
                        tile = tile.convert('RGBA')

                    x = col * TILE_SIZE
                    y = row * TILE_SIZE

                    merged_image.paste(tile, (x, y), tile)
                    successful_tiles += 1
                    logger.info(f"‚úÖ –¢–∞–π–ª [{row+1},{col+1}] —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é ({x}, {y}) - {successful_tiles}/{total_tiles}")
                else:
                    failed_tiles.append(url)
            except Exception as exc:
                failed_tiles.append(url)
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–ª–∞ [{row+1},{col+1}] ({url}): {exc}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
    if failed_tiles:
        logger.error(f"‚ùå –ó–ê–ì–†–£–ó–ö–ê –ù–ï–£–î–ê–ß–ù–ê: {len(failed_tiles)} –∏–∑ {total_tiles} —Ç–∞–π–ª–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        logger.error("–î–∞–º–ø –ù–ï –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω—ã –í–°–ï —Ç–∞–π–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        for i, url in enumerate(failed_tiles, 1):
            logger.error(f"  {i}. –ù–µ—É–¥–∞—á–Ω—ã–π —Ç–∞–π–ª: {url}")
        return None
    
    # –í—Å–µ —Ç–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    logger.info(f"‚úÖ –ó–ê–ì–†–£–ó–ö–ê –£–°–ü–ï–®–ù–ê: –≤—Å–µ {successful_tiles}/{total_tiles} —Ç–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    logger.info("–°–æ–∑–¥–∞—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–∞–º–ø...")

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ 9000x9000 –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª–µ–π
    logger.info(f"–ú–∞—Å—à—Ç–∞–±–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å {ORIGINAL_SIZE}x{ORIGINAL_SIZE} –¥–æ {FINAL_SIZE}x{FINAL_SIZE} (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {SCALE_FACTOR}x)")
    scaled_image = merged_image.resize((FINAL_SIZE, FINAL_SIZE), Image.Resampling.NEAREST)
    
    return scaled_image

def save_image(image, output_dir="output"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –≤ –ø–∞–ø–∫—É —Å –¥–∞—Ç–æ–π.
    
    Args:
        image (PIL.Image): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(output_dir, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
        from datetime import timedelta, timezone
        TOMSK_TZ = timezone(timedelta(hours=7))
        today = datetime.now(TOMSK_TZ).strftime("%Y%m%d")
        today_folder = os.path.join(output_dir, today)
        os.makedirs(today_folder, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        timestamp = datetime.now(TOMSK_TZ).strftime("%Y%m%d_%H%M%S")
        filename = f"merged_tiles_{timestamp}.png"
        filepath = os.path.join(today_folder, filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –≤ –ø–∞–ø–∫—É —Å –¥–∞—Ç–æ–π
        image.save(filepath, "PNG", optimize=True, compress_level=9)
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
        
        return filepath
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞.
    –î–∞–º–ø —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ 100% —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö —Ç–∞–π–ª–æ–≤.
    """
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–∞–π–ª–æ–≤")
    logger.info("üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –¥–∞–º–ø –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –í–°–ï–• 9 —Ç–∞–π–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    merged_image = create_merged_image()
    
    if merged_image is not None:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–∞–º–ø...")
        saved_path = save_image(merged_image)
        
        if saved_path:
            logger.info(f"‚úÖ –ü–†–û–¶–ï–°–° –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
            logger.info(f"üìÅ –î–∞–º–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {saved_path}")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return False
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        logger.error("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.error("   - –ù–µ –≤—Å–µ —Ç–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        logger.error("   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–º")
        logger.error("   - –ù–µ–≤–µ—Ä–Ω—ã–µ URL –∞–¥—Ä–µ—Å–∞ —Ç–∞–π–ª–æ–≤")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)


